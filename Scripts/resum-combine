#-*- mode: python-*-
 
import math as m
import glob
import argparse
import sys
import os
import subprocess
import yoda
import logging

value = 0
sumW_Sig = 1
sumW2_Sig = 2
err_Sig = 3
sumW_bSig = 4
sumW2_bSig = 5
err_bSig = 6
nEntries = 7


class Sigma(object):

    
    def __init__(self,values,AbsValues=False):
        self.AbsValues = AbsValues
        self.values = values


    @classmethod
    def from_file(cls, filename, toAbsValues=False):
        c = cls([])
        c.AbsValues = toAbsValues
        with open(filename,'r') as f:
            for line in f.readlines():
                if line.strip().startswith("#"): continue
                vals = line.split()
                if len(vals) != 8: continue
                c.values += [[float(val) for val in vals]]
        if toAbsValues:
            for i in range(len(c.values)):
                N = c.values[i][nEntries]
                c.values[i][sumW_Sig] *= N
                c.values[i][sumW_bSig] *= N
                c.values[i][sumW2_Sig] *= N
                c.values[i][sumW2_bSig] *= N
        return c

    @classmethod
    def from_yoda(cls, scatter):
        n = len(scatter.points)
        c = cls([[0]*8]*n)
        c.AbsValues = False
        sigma = scatter.points[-1].y
        sigma_err = (abs(scatter.points[-1].yErrs[0])
                     +abs(scatter.points[-1].yErrs[1]))/2.
        for i in range(n):
            p = scatter.points[i]
            c.values[i][value] = p.x
            c.values[i][sumW_Sig] = p.y
            c.values[i][err_Sig] = (abs(p.yErrs[0])+abs(p.yErrs[1]))/2.
            c.values[i][sumW_bSig] = sigma-p.y
            c.values[i][err_bSig] = m.sqrt(pow(sigma_err,2)+pow(c.values[i][err_Sig],2))
        return c
    
    def Sigma(self, v):
        for val in self.values:
            if abs(val[value]-v) < 1e-6:
                if self.AbsValues:
                    N = val[nEntries]
                    return (val[sumW_Sig]/N, val[err_Sig])
                else:
                    return (val[sumW_Sig], val[err_Sig])
        print("Value {} not found.".format(v))

    def barSigma(self, v):
        for val in self.values:
            if abs(val[value]-v) < 1e-6:
                if self.AbsValues:
                    N = val[nEntries]
                    return (val[sumW_bSig]/N, val[err_bSig])
                else:
                    return (val[sumW_bSig], val[err_bSig])
        print("Value {} not found.".format(v))

    def __add__(self,other):
        n = len(self.values)
        c = Sigma([[0]*8 for _ in range(n)])
        if self.AbsValues:
            assert other.AbsValues
            for i in range(n):
                vo = other.values[i]
                v = self.values[i]
                assert abs(v[value]-vo[value]) < 1e-6
                c.values[i][value] = v[value]
                c.values[i][sumW_Sig] = (v[sumW_Sig]+vo[sumW_Sig])
                c.values[i][sumW_bSig] = (v[sumW_bSig]+vo[sumW_bSig])
                c.values[i][sumW2_Sig] = (v[sumW2_Sig]+vo[sumW2_Sig])
                c.values[i][sumW2_bSig] = (v[sumW2_bSig]+vo[sumW2_bSig])
                c.values[i][nEntries] = (v[nEntries]+vo[nEntries])
                N = c.values[i][nEntries]
                c.values[i][err_Sig] = m.sqrt((c.values[i][sumW2_Sig]/N-pow(c.values[i][sumW_Sig]/N,2))/(N-1))
                c.values[i][err_bSig] = m.sqrt((c.values[i][sumW2_bSig]/N-pow(c.values[i][sumW_bSig]/N,2))/(N-1))
                c.AbsValues = True
        else:
            for i in range(n):
                vo = other.values[i]
                v = self.values[i]
                assert abs(v[value]-vo[value]) < 1e-6
                c.values[i][value] = v[value]
                c.values[i][sumW_Sig] = (v[sumW_Sig]+vo[sumW_Sig])
                c.values[i][err_Sig] = m.sqrt(pow(v[err_Sig],2)+pow(vo[err_Sig],2))
                c.values[i][sumW_bSig] = (v[sumW_bSig]+vo[sumW_bSig])
                c.values[i][err_bSig] = m.sqrt(pow(v[err_bSig],2)+pow(vo[err_bSig],2))
        return c

    def __getitem__(self,i):
        return self.values[i]
    
    def toYoda(self, path, title=None, mode="ln"):
        import yoda
        if title is None: title = path
        scatter1 = yoda.Scatter2D(path=path+"_Sigma",title=title+"_Sigma")
        scatter2 = yoda.Scatter2D(path=path+"_barSigma", title=title+"_Sigma")
        n = len(self.values)
        for i in range(n):
            v = self.values[i]
            if mode == "lin": x = v[value]
            elif mode == "log": x = m.log10(v[value])
            elif mode == "ln":  x = m.log(v[value])
            if self.AbsValues:
                N = v[nEntries]
                y = v[sumW_Sig]/N
            else:
                y = v[sumW_Sig]
            yerr = v[err_Sig]
            scatter1.addPoint(x,y,yerrs=(yerr,yerr))
            if self.AbsValues:
                y = v[sumW_bSig]/N
            else:
                y = v[sumW_bSig]
            yerr = v[err_bSig]
            scatter2.addPoint(x,y,yerrs=(yerr,yerr))
        return [scatter1,scatter2]


    def toFile(self,filename):
        with open(filename,'w') as f:
            f.write("# v Sigma{sumW sumW2 err} barSigma{sumW sumW2 err} NumEntries\n")
            for v in self.values:
                if self.AbsValues:
                    sig = v[sumW_Sig]/v[nEntries]
                    sig2 = v[sumW2_Sig]/v[nEntries]
                    sigb = v[sumW_bSig]/v[nEntries]
                    sigb2 = v[sumW2_bSig]/v[nEntries]
                else:
                    sig = v[sumW_Sig]
                    sig2 = v[sumW2_Sig]
                    sigb = v[sumW_bSig]
                    sigb2 = v[sumW2_bSig]
                f.write("{VAL} {SIG} {SIGW2} {SIGERR} {BSIG} {BSIGW2} {BSIGERR} {N}\n".format(VAL=v[value],
                                                                                              SIG=sig,
                                                                                              SIGW2=sig2,
                                                                                              SIGERR=v[err_Sig],
                                                                                              BSIG=sigb,
                                                                                              BSIGW2=sigb2,
                                                                                              BSIGERR=v[err_bSig],
                                                                                              N=v[nEntries]))

if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--nll-file', '-nll',default='NLL.dat')
    parser.add_argument('--lo-rs-file', '-loRS',default='LO_RS.dat')
    parser.add_argument('--lo-bvi-file', '-loBVI',default='LO_BVI.dat')
    parser.add_argument('--lo-file', '-lo',default='LO.dat')
    parser.add_argument('--nlo-rs-file', '-nloRS',default='NLO_RS.dat')
    parser.add_argument('--nlo-vi-file', '-nloVI',default='NLO_VI.dat')
    parser.add_argument('--nlo-file', '-nlo', default='NLO_VI.dat')
    parser.add_argument('--observable', '-obs', required=True, action='append')
    parser.add_argument('--rebin', default=1, type=int)
    parser.add_argument('--output-nll', '-NLL', default="NLL.yoda")
    parser.add_argument('--output-lo', '-LO', default="LO.yoda")
    parser.add_argument('--output-nlo', '-NLO', default="NLO.yoda")
    parser.add_argument('--output-match','-o',default="resum-plots")
    parser.add_argument('--channels', '-ch', action='append',default=None)
    parser.add_argument('--channel-fo-add', default=None)
    parser.add_argument('--channel-nll-duplicate', default=None)
    parser.add_argument('--variations', default=None)
    parser.add_argument('--match', action='store_true', default=False)
    parser.add_argument('--message', '-m', default='warning')
    
    args = parser.parse_args(sys.argv[1:])
    if args.channels is None: 
        args.channels = []
    else:
        args.channels = [ch for chs in args.channels for ch in chs.split()]
    if args.channel_nll_duplicate is None:
        nll_duplicates = {} 
    else:
        nll_duplicates = {}
        for ch in args.channel_nll_duplicate.split():
            chs = ch.split(':')
            nll_duplicates[chs[0]] = chs[1:]
    args.observable = [ob for obs in args.observable for ob in obs.split()]
    if args.variations is None:
        args.variations = []
    else:
        args.variations = [v for v in args.variations.split()]
    
    if args.message.startswith('d'): logging.basicConfig(level=logging.DEBUG)
    if args.message.startswith('i'): logging.basicConfig(level=logging.INFO)
    if args.message.startswith('w'): logging.basicConfig(level=logging.WARNING)
    if args.message.startswith('e'): logging.basicConfig(level=logging.ERROR)
    if args.message.startswith('c'): logging.basicConfig(level=logging.CRITICAL)
    

    
    for obs_mode in args.observable:
        logging.info("\nCombining files for {OBS}".format(OBS=obs_mode))
        obs = obs_mode.split(":")
        if len(obs) > 1: mode = obs[1]
        else: mode = 'ln'
        obs = obs[0]
        logging.info("Looking for {OBS} with mode {M}".format(OBS=obs,M=mode))
        # NLL files
        yodas = []
        if os.path.exists(args.nll_file):
            for var in [None]+args.variations:
                if var is None:
                    inpath = "{NLL}/{ACC}/{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}"
                else:
                    inpath = "{NLL}/{VAR}/{ACC}/{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                    if not os.path.exists(inpath.format(NLL=args.nll_file,ACC="NLL",OBS=obs,VAR=var)):
                        logging.info(("No NLL file for variation "
                                      "{VAR}. Ignoring.").format(VAR=var))
                        continue

                    
                yodas += Sigma.from_file(
                    inpath.format(NLL=args.nll_file,
                                  ACC="NLL",
                                  OBS=obs,
                                  VAR=var)).toYoda(outpath.format(OBS=obs,
                                                                  ACC="NLL",
                                                                  VAR=var),mode=mode)
                yodas += Sigma.from_file(
                    inpath.format(NLL=args.nll_file,
                                  ACC="LO",
                                  OBS=obs,
                                  VAR=var)).toYoda(outpath.format(OBS=obs,
                                                                  ACC="LO",
                                                                  VAR=var),mode=mode)
                yodas += Sigma.from_file(
                    inpath.format(NLL=args.nll_file,
                                  ACC="NLO",
                                  OBS=obs,
                                  VAR=var)).toYoda(outpath.format(OBS=obs,
                                                                  ACC="NLO",
                                                                  VAR=var),mode=mode)
                for ch in args.channels:
                    ch_all = ch.split(':')
                    ch = ch_all[0]

                    if var is None:
                        inpath = "{NLL}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}"
                    else:
                        inpath = "{NLL}/{VAR}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}_{VAR}"
                    if not os.path.exists(inpath.format(NLL=args.nll_file,ACC="NLL",CH=ch,OBS=obs,VAR=var)):
                        if var is None:
                            logging.info(("No NLL file for channel "
                                          "{CH}. Ignoring.").format(CH=ch))
                        else:
                            logging.info(("No NLL file for channel "
                                          "{CH} and variation {VAR}. Ignoring.").format(CH=ch,VAR=var))
                        continue


                
                    sigma_nll = Sigma.from_file(
                        inpath.format(NLL=args.nll_file,
                                      ACC="NLL",
                                      CH=ch,
                                      OBS=obs,
                                      VAR=var))
                    sigma_lo = Sigma.from_file(
                        inpath.format(NLL=args.nll_file,
                                      ACC="LO",
                                      CH=ch,
                                      OBS=obs,
                                      VAR=var))
                    sigma_nlo = Sigma.from_file(
                        inpath.format(NLL=args.nll_file,
                                      ACC="NLO",
                                      CH=ch,
                                      OBS=obs,
                                      VAR=var))

                    if len(ch_all) > 1:
                        for c in ch_all[1:]:
                            if not os.path.exists(inpath.format(NLL=args.nll_file,ACC="NLL",CH=c,OBS=obs)):
                                logging.info(("No NLL file for channel "
                                              "{CH}. Ignoring.").format(CH=c))
                                continue
                            sigma_nll += Sigma.from_file(
                                inpath.format(NLL=args.nll_file,
                                              ACC="NLL",
                                              CH=c,
                                              OBS=obs,
                                              VAR=var))
                            sigma_lo += Sigma.from_file(
                                inpath.format(NLL=args.nll_file,
                                              ACC="LO",
                                              CH=c,
                                              OBS=obs,
                                              VAR=var))
                            sigma_nlo += Sigma.from_file(
                                inpath.format(NLL=args.nll_file,
                                              ACC="NLO",
                                              CH=c,
                                              OBS=obs,
                                              VAR=var))

                
                    yodas += sigma_nll.toYoda(outpath.format(OBS=obs,
                                                             ACC="NLL",
                                                             CH=ch,
                                                             VAR=var),mode=mode)
                    yodas += sigma_lo.toYoda(outpath.format(OBS=obs,
                                                            ACC="LO",
                                                            CH=ch,
                                                            VAR=var),mode=mode)
                    yodas += sigma_nlo.toYoda(outpath.format(OBS=obs,
                                                             ACC="NLO",
                                                             CH=ch,
                                                             VAR=var),mode=mode)

                    if ch in nll_duplicates:
                        for c in nll_duplicates[ch]:
                            yodas += sigma_nll.toYoda(outpath.format(OBS=obs,
                                                                     ACC="NLL",
                                                                     CH=c,
                                                                     VAR=var),mode=mode)
                            yodas += sigma_lo.toYoda(outpath.format(OBS=obs,
                                                                    ACC="LO",
                                                                    CH=c,
                                                                    VAR=var),mode=mode)
                            yodas += sigma_nlo.toYoda(outpath.format(OBS=obs,
                                                                     ACC="NLO",
                                                                     CH=c,
                                                                     VAR=var),mode=mode)

                
            yoda.writeYODA(yodas,args.output_nll)
        elif not os.path.exists(args.output_nll):
            args.output_nll = "NO"
            
        # LO files
        if os.path.exists(args.lo_rs_file) and os.path.exists(args.lo_bvi_file):
            yodas = []
            for var in [None]+args.variations:
                if var is None:
                    inpath = "{ANALYSIS}/{ACC}/{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}"
                else:
                    inpath = "{ANALYSIS}/{ACC}/{VAR}_{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                    if not os.path.exists(inpath.format(ANALYSIS=args.lo_rs_file,ACC="LO_RS",OBS=obs,VAR=var)):
                        logging.info(("No LO RS file for variation "
                                      "{VAR}. Ignoring LO variation.").format(VAR=var))
                        continue
                    if not os.path.exists(inpath.format(ANALYSIS=args.lo_bvi_file,ACC="LO_BVI",OBS=obs,VAR=var)):
                        logging.info(("No LO BVI file for variation "
                                      "{VAR}. Ignoring LO variation.").format(VAR=var))
                        continue

                    
                rs = Sigma.from_file(
                    inpath.format(ANALYSIS=args.lo_rs_file,
                                  ACC="LO_RS",
                                  OBS=obs,
                                  VAR=var))
                bvi = Sigma.from_file(
                    inpath.format(ANALYSIS=args.lo_bvi_file,
                                  ACC="LO_BVI",
                                  OBS=obs,
                                  VAR=var))
                yodas += (rs+bvi).toYoda(outpath.format(OBS=obs,ACC="LO",VAR=var),mode=mode)
                for ch in args.channels:
                    ch_all = ch.split(':')
                    ch = ch_all[0]
                    if var is None:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}"
                    else:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{ADD}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}_{VAR}"

                    rs = Sigma.from_file(
                        inpath.format(ANALYSIS=args.lo_rs_file,
                                      ACC="LO_RS",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))
                    bvi = Sigma.from_file(
                        inpath.format(ANALYSIS=args.lo_bvi_file,
                                      ACC="LO_BVI",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))
                
                    if len(ch_all) > 1:
                        for c in ch_all[1:]:
                            rs += Sigma.from_file(
                                inpath.format(ANALYSIS=args.lo_rs_file,
                                              ACC="LO_RS",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))
                            bvi += Sigma.from_file(
                                inpath.format(ANALYSIS=args.lo_bvi_file,
                                              ACC="LO_BVI",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))
                        
                    yodas += (rs+bvi).toYoda(outpath.format(OBS=obs,ACC="LO",CH=ch,VAR=var),mode=mode)
                
            yoda.writeYODA(yodas,args.output_lo)
            
        elif os.path.exists(args.lo_file):
            yodas = []
            for var in [None]+args.variations:
                if var is None:
                    inpath = "{ANALYSIS}/{ACC}/{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}"
                else:
                    inpath = "{ANALYSIS}/{ACC}/{VAR}_{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                    if not os.path.exists(inpath.format(ANALYSIS=args.lo_file,ACC="LO",OBS=obs,VAR=var)):
                        logging.info(("No LO file for variation "
                                      "{VAR}. Ignoring LO variation.").format(VAR=var))
                        continue
            
                yodas += Sigma.from_file(
                    inpath.format(ANALYSIS=args.lo_file,
                                  ACC="LO",
                                  OBS=obs,
                                  VAR=var)).toYoda(outpath.format(OBS=obs,
                                                                  ACC="LO",
                                                                  VAR=var),mode=mode)
                for ch in args.channels:
                    ch_all = ch.split(':')
                    ch = ch_all[0]

                    if var is None:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}"
                    else:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{ADD}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}_{VAR}"
                    sigma = Sigma.from_file(
                        inpath.format(ANALYSIS=args.lo_file,
                                      ACC="LO",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))

                    if len(ch_all) > 1:
                        for c in ch_all[1:]:
                            sigma += Sigma.from_file(
                                inpath.format(ANALYSIS=args.lo_file,
                                              ACC="LO",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))
                        
                    yodas += sigma.toYoda(outpath.format(OBS=obs,
                                                         ACC="LO",
                                                         CH=ch,
                                                         VAR=var),mode=mode)
            yoda.writeYODA(yodas,args.output_lo)
        elif not os.path.exists(args.output_lo):
            args.output_lo = "NO"
        
        # NLO files
        if os.path.exists(args.nlo_rs_file) and os.path.exists(args.nlo_vi_file):
            yodas = []
            for var in [None]+args.variations:
                if var is None:
                    inpath = "{ANALYSIS}/{ACC}/{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}"
                else:
                    inpath = "{ANALYSIS}/{ACC}/{VAR}_{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                    if not os.path.exists(inpath.format(ANALYSIS=args.nlo_rs_file,ACC="NLO_RS",OBS=obs,VAR=var)):
                        logging.info(("No NLO RS file for variation "
                                      "{VAR}. Ignoring NLO variation.").format(VAR=var))
                        continue
                    if not os.path.exists(inpath.format(ANALYSIS=args.nlo_vi_file,ACC="NLO_VI",OBS=obs,VAR=var)):
                        logging.info(("No NLO VI file for variation "
                                      "{VAR}. Ignoring NLO variation.").format(VAR=var))
                        continue

                    
                rs = Sigma.from_file(
                    inpath.format(ANALYSIS=args.nlo_rs_file,
                                  ACC="NLO_RS",
                                  OBS=obs,
                                  VAR=var))
                vi = Sigma.from_file(
                    inpath.format(ANALYSIS=args.nlo_vi_file,
                                  ACC="NLO_VI",
                                  OBS=obs,
                                  VAR=var))
                yodas += (rs+vi).toYoda(outpath.format(OBS=obs,ACC="NLO",VAR=var),mode=mode)
                for ch in args.channels:
                    ch_all = ch.split(':')
                    ch = ch_all[0]
                    if var is None:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}"
                    else:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{VAR}_{OBS}_Sigma.dat"
                        outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}_{VAR}"
                            
                    rs = Sigma.from_file(
                        inpath.format(ANALYSIS=args.nlo_rs_file,
                                      ACC="NLO_RS",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))
                    vi = Sigma.from_file(
                        inpath.format(ANALYSIS=args.nlo_vi_file,
                                      ACC="NLO_VI",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))
                    if len(ch_all) > 1:
                        for c in ch_all[1:]:
                            rs += Sigma.from_file(
                                inpath.format(ANALYSIS=args.nlo_rs_file,
                                              ACC="NLO_RS",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))
                            vi += Sigma.from_file(
                                inpath.format(ANALYSIS=args.nlo_vi_file,
                                              ACC="NLO_VI",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))

                
                    yodas += (rs+vi).toYoda(outpath.format(OBS=obs,ACC="NLO",CH=ch,VAR=var),mode=mode)
                
            yoda.writeYODA(yodas,args.output_nlo)
                
        elif os.path.exists(args.nlo_file):
            yodas = []
            for var in [None]+args.variations:
                if var is None:
                    inpath = "{ANALYSIS}/{ACC}/{VAR}_{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                else:
                    inpath = "{ANALYSIS}/{ACC}/{VAR}_{OBS}_Sigma.dat"
                    outpath = "/Resum/{OBS}_{ACC}_{VAR}"
                    if not os.path.exists(inpath.format(ANALYSIS=args.nlo_rs_file,ACC="NLO",OBS=obs,VAR=var)):
                        logging.info(("No NLO file for variation "
                                      "{VAR}. Ignoring NLO variation.").format(VAR=var))
                        continue
 
                yodas = Sigma.from_file(
                    inpath.format(ANALYSIS=args.nlo_file,
                                  ACC="NLO",
                                  OBS=obs,
                                  VAR=var)).toYoda(outpath.format(OBS=obs,
                                                                  ACC="NLO",
                                                                  VAR=var),mode=mode)
                for ch in args.channels:
                    ch_all = ch.split(':')
                    ch = ch_all[0]
                    if var is None:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{OBS}_Sigma.dat"
                            outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}"
                    else:
                        if args.channel_fo_add is None:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{VAR}_{OBS}_Sigma.dat"
                        else:
                            inpath = "{ANALYSIS}/{ACC}/Channel_{CH}_{ADD}_{VAR}_{OBS}_Sigma.dat"
                            outpath = "/Resum/{OBS}_{ACC}_Channel_{CH}_{VAR}"
                    sigma = Sigma.from_file(
                        inpath.format(ANALYSIS=args.lo_file,
                                      ACC="NLO",
                                      CH=ch,
                                      ADD=args.channel_fo_add,
                                      OBS=obs,
                                      VAR=var))
                    if len(ch_all) > 1:
                        for c in ch_all[1:]:
                            sigma += Sigma.from_file(
                                inpath.format(ANALYSIS=args.lo_file,
                                              ACC="NLO",
                                              CH=c,
                                              ADD=args.channel_fo_add,
                                              OBS=obs,
                                              VAR=var))
                
                    yodas += sigma.toYoda(outpath.format(OBS=obs,
                                                         ACC="NLO",
                                                         CH=ch,
                                                         VAR=var),mode=mode)
            yoda.writeYODA(yodas,args.output_nlo)
        elif not os.path.exists(args.output_nlo):
            args.output_nlo = 'NO'
        
        if args.match:
            channels = []
            for i in range(len(args.channels)):
                channels += [args.channels[i].split(':')[0]]
            if len(channels) == 0:
                chstring = []
            elif len(channels) == 1:
                chstring = ['-ch',channels[0]]
            elif len(channels) > 1:
                chstring = ['-ch',"{}".format(" ".join(channels))]

            for var in [None]+args.variations:
                if var is None: resultDir = args.output_match
                else: resultDir = '{DIR}-{VAR}'.format(DIR=args.output_match,
                                                       VAR=var)
                command = (['resum-match',
                            '-lo',args.output_lo,
                            '-nlo',args.output_nlo,
                            '-nll',args.output_nll,
                            '-obs',obs,
                            '--rebin',str(args.rebin),
                            '--message',args.message,
                            '--name',str(var),
                            '-o', '{DIR}/{OBS}'.format(DIR=resultDir,
                                                       OBS=obs)]
                           + chstring)

                logging.info(" ".join(command))
                subprocess.call(command)
            

                
    if args.match:
        for var in [None]+args.variations:
            if var is None: resultDir = args.output_match
            else: resultDir = '{DIR}-{VAR}'.format(DIR=args.output_match,
                                                   VAR=var)
            fs = {}
            for obs_mode in args.observable:
                obs = obs_mode.split(":")[0]
                for f in glob.glob("{DIR}/{OBS}/*.yoda".format(DIR=resultDir,
                                                               OBS=obs)):
                    name = f.split("/")[-1]
                    if not name in fs:
                        fs[name] = yoda.readYODA(f,asdict=False)
                    else:
                        fs[name] += yoda.readYODA(f,asdict=False)

            dirName = "{DIR}/Summary".format(DIR=resultDir)
            if not os.path.exists(dirName): os.makedirs(dirName)
            for key in fs:
                yoda.writeYODA(fs[key],"{DIR}/{NAME}".format(DIR=dirName,
                                                             NAME=key))

            for ch in channels:
                fs = {}
                for obs_mode in args.observable:
                    obs = obs_mode.split(":")[0]
                    for f in glob.glob("{DIR}/{OBS}-{CH}/*.yoda".format(DIR=resultDir,
                                                                        OBS=obs,CH=ch)):
                        name = f.split("/")[-1]
                        if not name in fs:
                            fs[name] = yoda.readYODA(f,asdict=False)
                        else:
                            fs[name] += yoda.readYODA(f,asdict=False)

                dirName = "{DIR}/Summary-{CH}".format(DIR=resultDir,CH=ch)
                if not os.path.exists(dirName): os.makedirs(dirName)
                for key in fs:
                    yoda.writeYODA(fs[key],"{DIR}/{NAME}".format(DIR=dirName,
                                                                 NAME=key))
